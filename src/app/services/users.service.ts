import { Injectable, inject } from '@angular/core';
import { ContactInterface } from '../interfaces/contact.interface';
import {
  Firestore,
  collection,
  doc,
  onSnapshot,
  setDoc,
  DocumentReference,
} from '@angular/fire/firestore';
import { UsersContactsService } from './users-contacts.service';

/**
 * Service that interacts with Firestore to manage user contacts.
 * It provides methods to subscribe to a users list, add a user,
 * and retrieve user details.
 */
@Injectable({
  providedIn: 'root',
})
export class UsersService {
  firestore: Firestore = inject(Firestore);
  usersContactsService = inject(UsersContactsService);
  users: ContactInterface[] = [];

  /** Unsubscribe function for the user list listener */
  unsubscribeUser?: () => void;

  /**
   * Constructor that initializes the user subscription on creation
   */
  constructor() {
    if (!this.unsubscribeUser) {
      this.unsubscribeUser = this.subUsersList();
    }
  }

  /**
   * Initializes the Firestore subscription for users if not already started.
   */
  initUserService() {
    if (!this.unsubscribeUser) {
      this.unsubscribeUser = this.subUsersList();
    }
  }

  /**
   * Unsubscribes from the Firestore users listener to prevent memory leaks.
   */
  stopUserService() {
    if (this.unsubscribeUser) {
      this.unsubscribeUser();
    }
  }

  /**
   * Subscribes to the 'users' collection in Firestore and updates the
   * `users` array whenever the list changes.
   * @returns A function to unsubscribe from the Firestore listener
   */
  subUsersList() {
    return onSnapshot(
      this.getUsersRef(),
      (snapshot) => {
        this.users = [];
        snapshot.forEach((element) => {
          const user = element.data();
          this.users.push(
            this.usersContactsService.setObjectData(element.id, user)
          );
        });
      },
      (error) => {
        console.error('Firestore Error', error.message);
      }
    );
  }

  /**
   * Adds a new user to the Firestore database.
   * The user will be given a random color generated by UsersContactsService.
   * @param uid The unique identifier for the user
   * @param user The user data to be added
   * @returns A promise that resolves with the document reference of the newly added user
   */
  async addUser(
    uid: string,
    user: ContactInterface
  ): Promise<void | DocumentReference> {
    try {
      const userWithColor = {
        ...user,
        color: this.usersContactsService.getRandomColor(),
      };
      const userRef = doc(this.getUsersRef(), uid);
      await setDoc(userRef, userWithColor);
      return userRef;
    } catch (err) {
      console.error(err);
    }
  }

  /**
   * Returns a reference to the 'users' collection in Firestore.
   * @returns Firestore collection reference for 'users'
   */
  getUsersRef() {
    return collection(this.firestore, 'users');
  }

  /**
   * Returns a reference to a single user's document in Firestore by their ID.
   * @param docId The document ID of the user
   * @returns Firestore document reference for the specified user
   */
  getSingleUsersRef(docId: string) {
    return doc(collection(this.firestore, 'users'), docId);
  }

  /**
   * Extracts and returns the initials from the user's name (first and last name).
   * @param id The ID of the user
   * @returns A string containing the initials of the user's first and last name
   */
  nameInitials(id: string | undefined) {
    const contact = this.users.find((c) => c.id === id);
    const parts = contact?.name.trim().split(' ') || [];
    const nameLetter1 = contact?.name.charAt(0).toUpperCase() || '';
    const lastName = parts?.at(-1) || '';
    const lastNameLetter = lastName.charAt(0).toUpperCase();
    return nameLetter1 + lastNameLetter;
  }

  /**
   * Retrieves the color associated with a specific user.
   * @param id The ID of the user
   * @returns The color value for the user
   */
  contactColor(id: string | undefined) {
    const contact = this.users.find((c) => c.id === id);
    return contact?.color;
  }
}
